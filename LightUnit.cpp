//
// Created by skala on 16.5.17.
//

#include <sstream>
#include <cstring>
#include "LightUnit.h"
#include "StateMessage.h"
#include "NetTools.h"
#include "global_const.h"

LightUnit::LightUnit(uint32_t ALC1, std::string label) :
        ALC1_(ALC1), label_(label) {
    wall_ = Color();
    ceil_ = Color();

    uint16_t lightBulb[256] = {
            0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BC, 0xDF37, 0xCEF4, 0xCEF5, 0xDF58, 0xF7DD, 0xFFFF, 0xFFFF,
            0xFFFF,
            0xFFFF, 0xFFFF,   // 0x0010 (16) pixels
            0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDF38, 0xBE90, 0xBE91, 0xCED4, 0xCED4, 0xBE91, 0xBE91, 0xE77A, 0xFFFF,
            0xFFFF,
            0xFFFF, 0xFFFF,   // 0x0020 (32) pixels
            0xFFFF, 0xFFFF, 0xFFFF, 0xE759, 0xBE91, 0xDF58, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFE, 0xDF37, 0xBEB1, 0xEF9B,
            0xFFFF,
            0xFFFF, 0xFFFF,   // 0x0030 (48) pixels
            0xFFFF, 0xFFFF, 0xFFFF, 0xC6B2, 0xD737, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xD715, 0xC6D3,
            0xFFFF,
            0xFFFF, 0xFFFF,   // 0x0040 (64) pixels
            0xFFFF, 0xFFFF, 0xF7DD, 0xBE70, 0xF7BC, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF9C, 0xBE90,
            0xF7DD,
            0xFFFF, 0xFFFF,   // 0x0050 (80) pixels
            0xFFFF, 0xFFFF, 0xF7DD, 0xBE70, 0xEFBC, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xEFBC, 0xBE70,
            0xF7DD,
            0xFFFF, 0xFFFF,   // 0x0060 (96) pixels
            0xFFFF, 0xFFFF, 0xFFFF, 0xC6B2, 0xD737, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xD737, 0xC6B2,
            0xFFFF,
            0xFFFF, 0xFFFF,   // 0x0070 (112) pixels
            0xFFFF, 0xFFFF, 0xFFFF, 0xE759, 0xBE90, 0xEF9C, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF9C, 0xBE90, 0xE759,
            0xFFFF,
            0xFFFF, 0xFFFF,   // 0x0080 (128) pixels
            0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCEF4, 0xCEF4, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCEF4, 0xCEF4, 0xFFFF,
            0xFFFF,
            0xFFFF, 0xFFFF,   // 0x0090 (144) pixels
            0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF9B, 0xBE90, 0xF7DD, 0xFFFF, 0xFFFF, 0xF7DD, 0xBE90, 0xEF9B, 0xFFFF,
            0xFFFF,
            0xFFFF, 0xFFFF,   // 0x00A0 (160) pixels
            0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7BD, 0xB66F, 0xC6D3, 0xCEF5, 0xCEF5, 0xC6D3, 0xB66F, 0xF7BD, 0xFFFF,
            0xFFFF,
            0xFFFF, 0xFFFF,   // 0x00B0 (176) pixels
            0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCEB7, 0xB612, 0xB632, 0xB632, 0xB612, 0xCEB7, 0xFFFF, 0xFFFF,
            0xFFFF,
            0xFFFF, 0xFFFF,   // 0x00C0 (192) pixels
            0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x94B2, 0x39C7, 0x39E7, 0x39E7, 0x39C7, 0x94B2, 0xFFFF, 0xFFFF,
            0xFFFF,
            0xFFFF, 0xFFFF,   // 0x00D0 (208) pixels
            0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x94B2, 0x2124, 0x2124, 0x2124, 0x2124, 0x94B2, 0xFFFF, 0xFFFF,
            0xFFFF,
            0xFFFF, 0xFFFF,   // 0x00E0 (224) pixels
            0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xB5B6, 0x39E7, 0x2124, 0x2124, 0x39E7, 0xB5B6, 0xFFFF, 0xFFFF,
            0xFFFF,
            0xFFFF, 0xFFFF,   // 0x00F0 (240) pixels
            0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xBDF7, 0x8C51, 0x8C51, 0xBDF7, 0xFFFF, 0xFFFF, 0xFFFF,
            0xFFFF,
            0xFFFF, 0xFFFF,   // 0x0100 (256) pixels
    };

    setIcon(lightBulb);
}

const Color &LightUnit::getCeil_() const {
    return ceil_;
}

void LightUnit::setCeil_(const Color &ceil_) {
    LightUnit::ceil_ = ceil_;
}

const Color &LightUnit::getWall_() const {
    return wall_;
}

void LightUnit::setWall_(const Color &wall_) {
    LightUnit::wall_ = wall_;
}

const uint16_t *LightUnit::getIcon() const {
    return icon_;
}

uint32_t LightUnit::getALC1_() const {
    return ALC1_;
}

const std::string &LightUnit::getLabel_() const {
    return label_;
}

std::string LightUnit::debugString() const {
    std::stringstream stream;
    stream << "IP: " << getIp() << " Label: " << label_;
    return stream.str();
}

std::string LightUnit::broadcstDebugString() const {
    std::stringstream stream;
    stream << debugString();
    char data[100] = {0};
    sprintf(data, " Wall(%d,%d,%d) Ceil(%d,%d,%d)", wall_.getRGB888().r, wall_.getRGB888().g, wall_.getRGB888().b,
            ceil_.getRGB888().r, ceil_.getRGB888().g, ceil_.getRGB888().b);
    stream << data;
    return stream.str();
}

LightUnit::LightUnit() : LightUnit(0, "") {
}

void LightUnit::setIcon(uint16_t icon[256]) {
    for (int i = 0; i < 256; ++i) {
        icon_[i] = icon[i];
    }
}

void LightUnit::Update(const LightUnit &unit) {
    ceil_ = unit.getCeil_();
    wall_ = unit.getWall_();
}

std::string LightUnit::getIp()const {
    return NetTools::fromUINT32(ALC1_);
}

LightUnit::LightUnit(std::string ip, std::string label)
        : LightUnit(NetTools::toUINT32(ip), label) {
}

bool LightUnit::isIsHost_() const {
    return isHost_;
}

void LightUnit::setIsHost_(bool isHost_) {
    LightUnit::isHost_ = isHost_;
}
